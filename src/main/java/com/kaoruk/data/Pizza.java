/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kaoruk.data;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Pizza extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4768915987890884500L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Pizza\",\"namespace\":\"com.kaoruk\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"ingredient\",\"type\":{\"type\":\"array\",\"items\":[{\"type\":\"record\",\"name\":\"Abaloni\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"}]},{\"type\":\"record\",\"name\":\"Artichoke\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"}]},{\"type\":\"record\",\"name\":\"Mushroom\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"}]},{\"type\":\"record\",\"name\":\"Peperoni\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"bam\",\"type\":{\"type\":\"enum\",\"name\":\"Bam\",\"symbols\":[\"Apple\",\"Bar\",\"Foo\"]}}]}]}},{\"name\":\"vegetarian\",\"type\":\"boolean\"},{\"name\":\"vegan\",\"type\":\"boolean\"},{\"name\":\"calories\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Pizza> ENCODER =
      new BinaryMessageEncoder<Pizza>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Pizza> DECODER =
      new BinaryMessageDecoder<Pizza>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Pizza> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Pizza> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Pizza>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Pizza to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Pizza from a ByteBuffer. */
  public static Pizza fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.util.List<java.lang.Object> ingredient;
  @Deprecated public boolean vegetarian;
  @Deprecated public boolean vegan;
  @Deprecated public int calories;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Pizza() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param ingredient The new value for ingredient
   * @param vegetarian The new value for vegetarian
   * @param vegan The new value for vegan
   * @param calories The new value for calories
   */
  public Pizza(java.lang.CharSequence name, java.util.List<java.lang.Object> ingredient, java.lang.Boolean vegetarian, java.lang.Boolean vegan, java.lang.Integer calories) {
    this.name = name;
    this.ingredient = ingredient;
    this.vegetarian = vegetarian;
    this.vegan = vegan;
    this.calories = calories;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return ingredient;
    case 2: return vegetarian;
    case 3: return vegan;
    case 4: return calories;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: ingredient = (java.util.List<java.lang.Object>)value$; break;
    case 2: vegetarian = (java.lang.Boolean)value$; break;
    case 3: vegan = (java.lang.Boolean)value$; break;
    case 4: calories = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'ingredient' field.
   * @return The value of the 'ingredient' field.
   */
  public java.util.List<java.lang.Object> getIngredient() {
    return ingredient;
  }

  /**
   * Sets the value of the 'ingredient' field.
   * @param value the value to set.
   */
  public void setIngredient(java.util.List<java.lang.Object> value) {
    this.ingredient = value;
  }

  /**
   * Gets the value of the 'vegetarian' field.
   * @return The value of the 'vegetarian' field.
   */
  public java.lang.Boolean getVegetarian() {
    return vegetarian;
  }

  /**
   * Sets the value of the 'vegetarian' field.
   * @param value the value to set.
   */
  public void setVegetarian(java.lang.Boolean value) {
    this.vegetarian = value;
  }

  /**
   * Gets the value of the 'vegan' field.
   * @return The value of the 'vegan' field.
   */
  public java.lang.Boolean getVegan() {
    return vegan;
  }

  /**
   * Sets the value of the 'vegan' field.
   * @param value the value to set.
   */
  public void setVegan(java.lang.Boolean value) {
    this.vegan = value;
  }

  /**
   * Gets the value of the 'calories' field.
   * @return The value of the 'calories' field.
   */
  public java.lang.Integer getCalories() {
    return calories;
  }

  /**
   * Sets the value of the 'calories' field.
   * @param value the value to set.
   */
  public void setCalories(java.lang.Integer value) {
    this.calories = value;
  }

  /**
   * Creates a new Pizza RecordBuilder.
   * @return A new Pizza RecordBuilder
   */
  public static Pizza.Builder newBuilder() {
    return new Pizza.Builder();
  }

  /**
   * Creates a new Pizza RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Pizza RecordBuilder
   */
  public static Pizza.Builder newBuilder(Pizza.Builder other) {
    return new Pizza.Builder(other);
  }

  /**
   * Creates a new Pizza RecordBuilder by copying an existing Pizza instance.
   * @param other The existing instance to copy.
   * @return A new Pizza RecordBuilder
   */
  public static Pizza.Builder newBuilder(Pizza other) {
    return new Pizza.Builder(other);
  }

  /**
   * RecordBuilder for Pizza instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Pizza>
    implements org.apache.avro.data.RecordBuilder<Pizza> {

    private java.lang.CharSequence name;
    private java.util.List<java.lang.Object> ingredient;
    private boolean vegetarian;
    private boolean vegan;
    private int calories;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Pizza.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ingredient)) {
        this.ingredient = data().deepCopy(fields()[1].schema(), other.ingredient);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.vegetarian)) {
        this.vegetarian = data().deepCopy(fields()[2].schema(), other.vegetarian);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.vegan)) {
        this.vegan = data().deepCopy(fields()[3].schema(), other.vegan);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.calories)) {
        this.calories = data().deepCopy(fields()[4].schema(), other.calories);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Pizza instance
     * @param other The existing instance to copy.
     */
    private Builder(Pizza other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ingredient)) {
        this.ingredient = data().deepCopy(fields()[1].schema(), other.ingredient);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.vegetarian)) {
        this.vegetarian = data().deepCopy(fields()[2].schema(), other.vegetarian);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.vegan)) {
        this.vegan = data().deepCopy(fields()[3].schema(), other.vegan);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.calories)) {
        this.calories = data().deepCopy(fields()[4].schema(), other.calories);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public Pizza.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public Pizza.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ingredient' field.
      * @return The value.
      */
    public java.util.List<java.lang.Object> getIngredient() {
      return ingredient;
    }

    /**
      * Sets the value of the 'ingredient' field.
      * @param value The value of 'ingredient'.
      * @return This builder.
      */
    public Pizza.Builder setIngredient(java.util.List<java.lang.Object> value) {
      validate(fields()[1], value);
      this.ingredient = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ingredient' field has been set.
      * @return True if the 'ingredient' field has been set, false otherwise.
      */
    public boolean hasIngredient() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ingredient' field.
      * @return This builder.
      */
    public Pizza.Builder clearIngredient() {
      ingredient = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'vegetarian' field.
      * @return The value.
      */
    public java.lang.Boolean getVegetarian() {
      return vegetarian;
    }

    /**
      * Sets the value of the 'vegetarian' field.
      * @param value The value of 'vegetarian'.
      * @return This builder.
      */
    public Pizza.Builder setVegetarian(boolean value) {
      validate(fields()[2], value);
      this.vegetarian = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'vegetarian' field has been set.
      * @return True if the 'vegetarian' field has been set, false otherwise.
      */
    public boolean hasVegetarian() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'vegetarian' field.
      * @return This builder.
      */
    public Pizza.Builder clearVegetarian() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'vegan' field.
      * @return The value.
      */
    public java.lang.Boolean getVegan() {
      return vegan;
    }

    /**
      * Sets the value of the 'vegan' field.
      * @param value The value of 'vegan'.
      * @return This builder.
      */
    public Pizza.Builder setVegan(boolean value) {
      validate(fields()[3], value);
      this.vegan = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'vegan' field has been set.
      * @return True if the 'vegan' field has been set, false otherwise.
      */
    public boolean hasVegan() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'vegan' field.
      * @return This builder.
      */
    public Pizza.Builder clearVegan() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'calories' field.
      * @return The value.
      */
    public java.lang.Integer getCalories() {
      return calories;
    }

    /**
      * Sets the value of the 'calories' field.
      * @param value The value of 'calories'.
      * @return This builder.
      */
    public Pizza.Builder setCalories(int value) {
      validate(fields()[4], value);
      this.calories = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'calories' field has been set.
      * @return True if the 'calories' field has been set, false otherwise.
      */
    public boolean hasCalories() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'calories' field.
      * @return This builder.
      */
    public Pizza.Builder clearCalories() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Pizza build() {
      try {
        Pizza record = new Pizza();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.ingredient = fieldSetFlags()[1] ? this.ingredient : (java.util.List<java.lang.Object>) defaultValue(fields()[1]);
        record.vegetarian = fieldSetFlags()[2] ? this.vegetarian : (java.lang.Boolean) defaultValue(fields()[2]);
        record.vegan = fieldSetFlags()[3] ? this.vegan : (java.lang.Boolean) defaultValue(fields()[3]);
        record.calories = fieldSetFlags()[4] ? this.calories : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Pizza>
    WRITER$ = (org.apache.avro.io.DatumWriter<Pizza>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Pizza>
    READER$ = (org.apache.avro.io.DatumReader<Pizza>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
